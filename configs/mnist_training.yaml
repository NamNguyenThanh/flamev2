data:
  module: flame.modules.core.data.datacontroller
  class: DataController
  DataController:
    train:
      module: torchvision.datasets
      class: MNIST
      MNIST:
        root: '''dataset/MNIST/'''
        train: True
        download: True
        transform: transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])

      dataloader:
        batch_size: 128
        shuffle: False

    train_eval:
      module: torchvision.datasets
      class: MNIST
      MNIST:
        root: '''dataset/MNIST/'''
        train: True
        download: True
        transform: transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])

      dataloader:
        batch_size: 128
        shuffle: False

    valid:
      module: torchvision.datasets
      class: MNIST
      MNIST:
        root: '''dataset/MNIST/'''
        train: False
        download: True
        transform: transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])

      dataloader:
        batch_size: 128
        shuffle: False

loss:
  module: flame.modules.core.loss.loss
  class: Loss
  Loss:
    loss_fn: torch.nn.NLLLoss()
    output_transform: 'lambda x: x'

model:
  module: flame.modules.core.model.net
  class: Net

optim:
  module: flame.modules.core.optim.torch_optim
  class: TorchOptim
  TorchOptim:
    optim: torch.optim.SGD
    optim_kwargs:
      lr: 0.01
      momentum: 0.9

train_evaluator:
  module: flame.modules.handlers.metric_evaluator
  class: MetricEvaluator
  MetricEvaluator:
    dataset_name: '''train_eval'''
    device: '''cpu'''

valid_evaluator:
  module: flame.modules.handlers.metric_evaluator
  class: MetricEvaluator
  MetricEvaluator:
    dataset_name: '''valid'''
    device: '''cpu'''

metrics:
  module: flame.modules.handlers.metrics.metrics
  class: Metrics
  Metrics:
    metric_module: [
      flame.modules.handlers.metrics.loss, 
      ignite.metrics, 
      ignite.metrics,
    ]
    metric_class: [
      Loss, 
      Accuracy, 
      Precision,
    ]
    metric_name: [
      loss, 
      accuracy, 
      precision,
    ]
    metric_params: [
      {'loss_fn': torch.nn.NLLLoss()}, 
      {}, 
      {'average': True},
    ]
    attach_to:
      train_evaluator: train
      valid_evaluator: valid

screenlogger:
  module: flame.modules.handlers.screenlogger
  class: ScreenLogger
  ScreenLogger:
    eval_names: [
      train, 
      valid,
    ]

history:
  module: flame.modules.handlers.checkpoint
  class: History

best_saver:
  module: flame.modules.handlers.checkpoint
  class: BestSaver
  BestSaver:
    dirname: '''checkpoint/MNIST'''
    score_name: '''accuracy'''
    evaluator_name: '''valid_evaluator'''
    n_saved: 10

backup_saver:
  module: flame.modules.handlers.checkpoint
  class: BackupSaver
  BackupSaver:
    modules: [
      model, 
      optim, 
      backup_saver, 
      best_saver, 
      history,
    ]
    dirname: '''checkpoint/MNIST'''
    save_interval: 1
    n_saved: 10

checkpoint_loader:
  module: flame.modules.handlers.checkpoint
  class: CheckpointLoader
  CheckpointLoader:
    checkpoint_path: ''''''
    mode: '''train'''

early_stopping:
  module: flame.modules.handlers.early_stopping
  class: EarlyStopping
  EarlyStopping:
    patience: 2
    score_name: '''accuracy'''
    evaluator_name: '''valid_evaluator'''
    mode: '''max'''

engine:
  module: flame.modules.core.engine.engine
  class: Trainer
  Trainer:
    dataset_name: '''train'''
    device: '''cpu'''
    max_epochs: 5

extralibs:
  torch: torch
  transforms: torchvision.transforms